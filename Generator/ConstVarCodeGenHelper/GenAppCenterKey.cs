using System.CommandLine.Parsing;
using System.CommandLine;

using CodegenCS.Runtime;

using CodegenCS;

// be sure to add this using statement for CodegenCS template syntax passing C# compiler checking
using static CodegenCS.Symbols;

namespace ConstVarCodeGenHelper
{
    internal class GenAppCenterKey
    {
        private static readonly Option<string[]> ConstNameOpt = new("name", description: "The name of the const") { Arity = ArgumentArity.ZeroOrMore };
        private static readonly Option<string[]> ConstValueOpt = new("value", description: "The value of the const") { Arity = ArgumentArity.ZeroOrMore };
        private static readonly Command DefineConstCmd = new("defineConst", description: "define constants using the syntax: name=foo1 value=bar1 name=foo2 value=bar2 ...");

        private readonly ParseResult _parseResult;
        private readonly ILogger _logger;

        public GenAppCenterKey(ParseResult parseResult, ILogger logger)
        {
            _parseResult = parseResult;
            _logger = logger;
        }

        public int Main(ICodegenTextWriter writer)
        {
            try
            {
                Process(writer);
            }
            catch (Exception e)
            {
                _logger.WriteLineErrorAsync(ConsoleColor.Red, (RawString)e.Message);
                return -1;
            }
            return 0;
        }

        public static void ConfigureCommand(Command command)
        {
            DefineConstCmd.AddOption(ConstNameOpt);
            DefineConstCmd.AddOption(ConstValueOpt);

            command.Description = "Generates a public static Class with const string by argument value";
            command.AddCommand(DefineConstCmd);
        }

        private void Process(ICodegenTextWriter writer)
        {
            if (_parseResult.Errors.Any())
            {
                _logger.WriteLineErrorAsync("Parse errors:");
                throw new AggregateException(_parseResult.Errors.Select(parseError => new Exception(parseError.Message)));
            }

            var name = _parseResult.GetValueForOption(ConstNameOpt);
            var value = _parseResult.GetValueForOption(ConstValueOpt);
            IEnumerable<(string n, string v)>? constPairs = null;
            if (name != null && name.Length != 0 && value != null && value.Length != 0)
            {
                if (name!.Length != value!.Length)
                {
                    throw new ArgumentException("The number of names and values must match");
                }

                constPairs = name.Zip(value, (n, v) => (n, v));
                Render(writer, constPairs);
            }
            else
            {
                _logger.WriteLineAsync(ConsoleColor.DarkYellow, "No const defined, nothing to generate");
            }
        }

        private static void Render(ICodegenTextWriter writer, IEnumerable<(string n, string v)> constPairs)
        {
            writer.WriteLine($$"""
                // This file is generated by CodegenCS( https://github.com/CodegenCS/CodegenCS )
                namespace Generated;

                /// <summary>
                /// Auto generated class, do not edit it directly.
                /// </summary>
                public static class AppCenterKey
                {{{IF(constPairs.Any())}}
                    public const string {{constPairs.Select(nameValue => (FormattableString)$"{nameValue.n} = \"{nameValue.v}\";").Render()}}{{ENDIF}}
                }
                """);
        }
    }
}
